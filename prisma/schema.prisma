datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]

}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String                @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  username            String?
  accounts            Account[]
  sessions            Session[]
  Authenticator       Authenticator[]
  Chatbot             Chatbot[]
  UserCharacteristic  UserCharacteristics[]
  PhysicalActivityLog PhysicalActivityLog[]
  UserActivites       UserActivites[]
  FoodLog             FoodLog[]
  UserHydration       UserHydration[]
  SleepTracker        SleepTracker[]
  UserGoal            UserGoal?
  lastSeen            DateTime?

  createdAt DateTime @db.Timestamptz() @default(now())
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @db.Timestamptz() @default(now())
  updatedAt DateTime @updatedAt @db.Timestamptz()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @db.Timestamptz() @default(now())
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String  @db.Text
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model UserCharacteristics {
  id     String @id @default(cuid())
  userId String 

  gender                  String
  age                     String
  height                  String
  registeredWeight        String?
  currentWeight           String
  activityFactor          String
  mealsPerDay             String
  sleepHours              String
  workoutsPerWeek         String
  manualCalorieAdjustment String?
  bmi                     String?
  tdee                    String?
  bmr                     String?
  bodyFatPercentage       String?
  isDeleted               Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @db.Timestamptz() @default(now())
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model UserGoal {
  id             String  @id @default(cuid())
  userId         String  @unique
  goal           String
  deficitPerDay  String
  targetTime     String?
  hydrationNeeds Float?
  targetWeight   String
  totalDeficit   String
  stepNeeds      String
  maxDailyCalories    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @db.Timestamptz() @default(now())
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model PhysicalActivityLog {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityType   ActivityType[]
  stepsCount     Float?
  duration       Int // dalam menit
  caloriesBurned Float
  createdAt      DateTime       @default(now())
  userActivityId UserActivites?
}

model ActivityType {
  id             String         @id @default(cuid())
  name           String
  duration       Int // dalam menit
  metValue       Float
  physicalActivityId String

  physicalActivity PhysicalActivityLog @relation(fields: [physicalActivityId], references: [id], onDelete: Cascade)
  createdAt DateTime @db.Timestamptz() @default(now())
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model FoodLog {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodName       String
  calories       Float
  mealType       String
  userActivityId UserActivites?

  createdAt DateTime @db.Timestamptz() @default(now())
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model UserHydration {
  id           String         @id @default(cuid())
  userId       String      
  waterIntake  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt @db.Timestamptz()
  userActivity UserActivites?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SleepTracker {
  id        String   @id @default(cuid())
  userId    String
  duration  Float // dalam menit
  createdAt DateTime @db.Timestamptz() @default(now())
  updatedAt DateTime @updatedAt @db.Timestamptz()

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userActivity UserActivites?
}

model UserActivites {
  id                    String   @id @default(cuid())
  userId                String
  category              ACTIVITY_TYPE
  title                 String
  effectToBody          String?
  sleepTrackerId        String?  @unique
  userHydrationId       String?  @unique
  stepTrackerId         String?  @unique
  foodLogId             String?  @unique
  physicalActivityLogId String?  @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt @db.Timestamptz()

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  sleepTracker        SleepTracker?        @relation(fields: [sleepTrackerId], references: [id], onDelete: Cascade)
  userHydration       UserHydration?       @relation(fields: [userHydrationId], references: [id], onDelete: Cascade)
  foodLog             FoodLog?             @relation(fields: [foodLogId], references: [id], onDelete: Cascade)
  physicalActivityLog PhysicalActivityLog? @relation(fields: [physicalActivityLogId], references: [id], onDelete: Cascade)
}

model Chatbot {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payload   String? // Menggunakan tipe TEXT
  sender    SENDER
  createdAt DateTime @db.Timestamptz() @default(now())
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

enum SENDER {
  USER
  BOT
}

enum ACTIVITY_TYPE {
  SLEEP_TRACKER
  USER_HYDRATION
  FOOD_LOG
  PHYSICAL_ACTIVITY
  STEP_TRACKER
}