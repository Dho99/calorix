datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String                @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  username            String?
  accounts            Account[]
  sessions            Session[]
  Authenticator       Authenticator[]
  Chatbot             Chatbot[]
  UserCharacteristic  UserCharacteristics?
  PhysicalActivityLog PhysicalActivityLog[]
  UserActivites       UserActivites[]
  FoodLog             FoodLog[]
  UserHydration       UserHydration[]
  SleepTracker        SleepTracker[]
  UserGoal            UserGoal?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model UserCharacteristics {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  gender                  String
  age                     String
  height                  String
  currentWeight           String
  physicalActivities      String
  activityFactor          String
  mealsPerDay             String
  sleepHours              String
  sportIntensity          String?
  manualCalorieAdjustment String?
  bmi                     String?
  tdee                    String?
  bmr                     String?
  bodyFatPercentage       String?
  isDeleted               Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGoal {
  id             String  @id @default(cuid())
  userId         String  @unique
  goal           String
  deficitPerDay  String
  stepsGoal      String
  targetTime     String?
  hydrationNeeds String
  targetWeight   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PhysicalActivityLog {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityName   String
  metValue       Float
  duration       Int // dalam menit
  caloriesBurned Float
  createdAt      DateTime       @default(now())
  userActivityId UserActivites?
}

model FoodLog {
  id             String         @id @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodName       String
  calories       Float
  mealType       String
  userActivityId UserActivites?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserHydration {
  id           String         @id @default(cuid())
  userId       String         @unique
  waterIntake  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userActivity UserActivites?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SleepTracker {
  id        String   @id @default(cuid())
  userId    String
  duration  Float // dalam menit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userActivity UserActivites?
}

model UserActivites {
  id                    String   @id @default(cuid())
  userId                String
  category              ACTIVITY_TYPE
  effectToBody          String?
  sleepTrackerId        String?  @unique
  userHydrationId       String?  @unique
  foodLogId             String?  @unique
  physicalActivityLogId String?  @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  sleepTracker        SleepTracker?        @relation(fields: [sleepTrackerId], references: [id])
  userHydration       UserHydration?       @relation(fields: [userHydrationId], references: [id])
  foodLog             FoodLog?             @relation(fields: [foodLogId], references: [id])
  physicalActivityLog PhysicalActivityLog? @relation(fields: [physicalActivityLogId], references: [id])
}

model Chatbot {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payload   String?
  sender    SENDER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SENDER {
  USER
  BOT
}

enum ACTIVITY_TYPE {
  SLEEP_TRACKER
  USER_HYDRATION
  FOOD_LOG
  PHYSICAL_ACTIVITY
}
