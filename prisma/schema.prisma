datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  username      String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  Chatbot      Chatbot[]
  UserCharacteristic UserCharacteristics[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model UserCharacteristics {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gender               String
  age                  Int
  height_cm            Int
  current_weight_kg    Int
  target_weight_kg     Int
  target_date          DateTime
  activity_level       String
  meal_portion         String
  daily_diet           Json
  eating_behavior      Json
  exercise_frequency_per_week Int
  exercise_duration_hour      Float
  exercise_intensity   String
  activity_function    String
  sleep_hours          Int
  water_intake         String
  stress_score         Int
  sleep_quality        String
  medical_history      Json
  medication_use       Json
  diet_experience      String
  diet_preferences     Json
  waist_cm             Int
  hip_cm               Int
  goal_priority        String
  motivation_level     Int
  confidence_level     Int


  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Chatbot {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payload     String?
  sender      SENDER
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SENDER {
  USER
  BOT
}